{"version":3,"sources":["ng://cloudinary-subtitle-lib/lib/cloudinary-subtitle-lib.service.ts"],"names":["CloudinarySubtitleLibService","prototype","addSubtitlesToVideo","cloudName","videoPublicId","subtitles","length","url","this","BASE_URL","CLOUDINARY_URL_VIDEO_TYPE_EXTENSION","map","entry","index","text","_this","entryToCloudinaryParams","console","error","addTextPositionAndStyles","parseTimeToParam","encodeURIComponent","prefix","time","timeArray","split","sec","min","parseFloat","pop","Injectable","args","providedIn"],"mappings":"4RAAA,IAAAA,EAAA,WAWE,SAAAA,kBAHW,uEAC2B,wBAI/BA,EAAAC,UAAAC,6BAAoBC,EAAmBC,EAAuBC,cAEnE,GAAKF,GAAkC,IAArBA,EAAUG,OAO5B,GAAKF,GAA0C,IAAzBA,EAAcE,OAApC,CAOA,GAAKD,GAAcA,EAAUA,WAA4C,IAA/BA,EAAUA,UAAUC,OAA9D,CAQA,IAAIC,EAAMC,KAAKC,SAAWN,EAAYK,KAAKE,oCAa3C,OAZuBL,EAAUA,UAElBM,IAAI,SAACC,EAAOC,GACrBD,EAAM,iBAAmBA,EAAM,eAAiBA,EAAME,KACtDP,GAAOQ,EAAKC,wBAAwBJ,GAEtCK,QAAQC,MAAM,gCAAgCL,EAAK,gIAKvDN,GAAOH,EAnBLa,QAAQC,MAAM,4SAPdD,QAAQC,MAAM,kOAPdD,QAAQC,MAAM,+NAqCVlB,EAAAC,UAAAe,iCAAwBJ,GAC9B,OAAQJ,KAAKW,yBAAyBP,EAAME,MAC1CN,KAAKY,iBAAiB,MAAOR,EAAM,iBAAmB,IACtDJ,KAAKY,iBAAiB,MAAOR,EAAM,eAAiB,KAGhDZ,EAAAC,UAAAkB,kCAAyBL,GAC/B,MAAO,qBAAuBO,mBAAmBA,mBAAmBP,IAAS,mCAGvEd,EAAAC,UAAAmB,0BAAiBE,EAAQC,GAI/B,IAHA,IAAIC,EAAYD,EAAKE,MAAM,KACzBC,EAAM,EAAGC,EAAM,EAES,EAAnBH,EAAUlB,QACfoB,GAAOC,EAAMC,WAAWJ,EAAUK,OAClCF,GAAO,GAET,OAAOL,EAASI,uBArEnBI,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,sJAHd","sourcesContent":["import {Injectable} from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class CloudinarySubtitleLibService {\r\n\r\n  BASE_URL = 'https://res.cloudinary.com/';\r\n  CLOUDINARY_URL_VIDEO_TYPE_EXTENSION = '/video/upload/';\r\n\r\n  constructor() {}\r\n\r\n  public addSubtitlesToVideo(cloudName: string, videoPublicId: string, subtitles: any) {\r\n\r\n    if (!cloudName || cloudName.length === 0) {\r\n      console.error(`Missing or empty appropriate cloudName...\r\n                     cloudName should be a string which represents your cloud name provided by cloudinary,\\n\r\n                     please follow the instructions and try again`);\r\n      return;\r\n    }\r\n\r\n    if (!videoPublicId || videoPublicId.length === 0) {\r\n      console.error(`Missing appropriate videoPublicId...\\n\r\n                     videoPublicId should be a string which represents the video id provided by cloudinary,\\n \r\n                     please follow the instructions and try again`);\r\n      return;\r\n    }\r\n\r\n    if (!subtitles || !subtitles.subtitles || subtitles.subtitles.length === 0) {\r\n      console.error(`Missing or bad appropriate subtitles JSON...\\n\r\n                     the appropriate subtitles JSON should be of type:\\n\r\n                     { subtitles: { 'start-timing': string, 'end-timing': string, text: string }[] }\\n\r\n                     please follow the instructions and try again`);\r\n      return;\r\n    }\r\n\r\n    let url = this.BASE_URL + cloudName + this.CLOUDINARY_URL_VIDEO_TYPE_EXTENSION;\r\n    const subtitlesArray = subtitles.subtitles;\r\n\r\n    subtitlesArray.map((entry, index) => {\r\n      if (entry['start-timing'] && entry['end-timing'] && entry.text) {\r\n          url += this.entryToCloudinaryParams(entry);\r\n      } else {\r\n        console.error(`Bad subtitle format at index ${index}, please make sure that each subtitle is of \r\n        type: { 'start-timing': string, 'end-timing': string, text: string }`);\r\n      }\r\n    });\r\n\r\n    url += videoPublicId;\r\n    return url;\r\n  }\r\n\r\n  private entryToCloudinaryParams(entry): string {\r\n    return (this.addTextPositionAndStyles(entry.text) +\r\n      this.parseTimeToParam('so_', entry['start-timing']) + ',' +\r\n      this.parseTimeToParam('eo_', entry['end-timing']) + '/');\r\n  }\r\n\r\n  private addTextPositionAndStyles(text): string {\r\n    return 'l_text:Arial_40px:' + encodeURIComponent(encodeURIComponent(text)) + ',y_60,g_south,b_black,co_white,';\r\n  }\r\n\r\n  private parseTimeToParam(prefix, time): string {\r\n    let timeArray = time.split(':'),\r\n      sec = 0, min = 1;\r\n\r\n    while (timeArray.length > 0) {\r\n      sec += min * parseFloat(timeArray.pop());\r\n      min *= 60;\r\n    }\r\n    return prefix + sec;\r\n  }\r\n}\r\n"]}