{"version":3,"file":"cloudinary-subtitle-lib.umd.js.map","sources":["ng://cloudinary-subtitle-lib/lib/cloudinary-subtitle-lib.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class CloudinarySubtitleLibService {\n\n  BASE_URL = 'https://res.cloudinary.com/';\n  CLOUDINARY_URL_VIDEO_TYPE_EXTENSION = '/video/upload/';\n\n  constructor() {}\n\n  public addSubtitlesToVideo(cloudName: string, videoPublicId: string, subtitles: any) {\n\n    if(!cloudName || cloudName.length === 0){\n      console.error(`Missing or empty appropriate cloudName...\n                     cloudName should be a string which represents your cloud name provided by cloudinary,\\n\n                     please follow the instructions and try again`);\n      return;\n    }\n\n    if(!videoPublicId || videoPublicId.length === 0){\n      console.error(`Missing appropriate videoPublicId...\\n\n                     videoPublicId should be a string which represents the video id provided by cloudinary,\\n \n                     please follow the instructions and try again`);\n\n      return;\n    }\n\n    if(!subtitles || !subtitles.subtitles || subtitles.subtitles.length === 0){\n      console.error(`Missing or bad appropriate subtitles JSON...\\n\n                     the appropriate subtitles JSON should be of type:\\n\n                     { subtitles: { 'start-timing': string, 'end-timing': string, text: string }[] }\\n\n                     please follow the instructions and try again`);\n      return;\n    }\n\n    let url = this.BASE_URL + cloudName + this.CLOUDINARY_URL_VIDEO_TYPE_EXTENSION;\n    const subtitlesArray = subtitles.subtitles;\n\n    subtitlesArray.map(entry => {\n      url += this.entryToCloudinaryParams(entry);\n    });\n\n    url += videoPublicId;\n    return url;\n  }\n\n  private entryToCloudinaryParams(entry): string {\n    return (this.addTextAndPosition(entry.text) +\n      this.parseTimeToParam('so_', entry['start-timing']) + ',' +\n      this.parseTimeToParam('eo_', entry['end-timing']) + '/');\n  }\n\n  private addTextAndPosition(text): string {\n    return 'l_text:Arial_40px:' + encodeURIComponent(encodeURIComponent(text)) + ',y_60,g_south,b_black,co_white,';\n  }\n\n  private parseTimeToParam(prefix, time): string {\n    let timeArray = time.split(':'),\n      sec = 0, min = 1;\n\n    while (timeArray.length > 0) {\n      sec += min * parseFloat(timeArray.pop());\n      min *= 60;\n    }\n    return prefix + sec;\n  }\n}\n"],"names":["Injectable"],"mappings":";;;;;;;;;;AAAA;QAWE;4BAHW,6BAA6B;uDACF,gBAAgB;SAEtC;;;;;;;QAET,0DAAmB;;;;;;sBAAC,SAAiB,EAAE,aAAqB,EAAE,SAAc;;gBAEjF,IAAG,CAAC,SAAS,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAC;oBACtC,OAAO,CAAC,KAAK,CAAC,4NAE8C,CAAC,CAAC;oBAC9D,OAAO;iBACR;gBAED,IAAG,CAAC,aAAa,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAC;oBAC9C,OAAO,CAAC,KAAK,CAAC,2NAE8C,CAAC,CAAC;oBAE9D,OAAO;iBACR;gBAED,IAAG,CAAC,SAAS,IAAI,CAAC,SAAS,CAAC,SAAS,IAAI,SAAS,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAC;oBACxE,OAAO,CAAC,KAAK,CAAC,qSAG8C,CAAC,CAAC;oBAC9D,OAAO;iBACR;;gBAED,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,GAAG,SAAS,GAAG,IAAI,CAAC,mCAAmC,CAAC;;gBAC/E,IAAM,cAAc,GAAG,SAAS,CAAC,SAAS,CAAC;gBAE3C,cAAc,CAAC,GAAG,CAAC,UAAA,KAAK;oBACtB,GAAG,IAAI,KAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;iBAC5C,CAAC,CAAC;gBAEH,GAAG,IAAI,aAAa,CAAC;gBACrB,OAAO,GAAG,CAAC;;;;;;QAGL,8DAAuB;;;;sBAAC,KAAK;gBACnC,QAAQ,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,IAAI,CAAC;oBACzC,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,KAAK,CAAC,cAAc,CAAC,CAAC,GAAG,GAAG;oBACzD,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,KAAK,CAAC,YAAY,CAAC,CAAC,GAAG,GAAG,EAAE;;;;;;QAGrD,yDAAkB;;;;sBAAC,IAAI;gBAC7B,OAAO,oBAAoB,GAAG,kBAAkB,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,GAAG,iCAAiC,CAAC;;;;;;;QAGzG,uDAAgB;;;;;sBAAC,MAAM,EAAE,IAAI;;gBACnC,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CACZ;;gBADnB,IACE,GAAG,GAAG,CAAC,CAAU;;gBADnB,IACW,GAAG,GAAG,CAAC,CAAC;gBAEnB,OAAO,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC3B,GAAG,IAAI,GAAG,GAAG,UAAU,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC;oBACzC,GAAG,IAAI,EAAE,CAAC;iBACX;gBACD,OAAO,MAAM,GAAG,GAAG,CAAC;;;oBAjEvBA,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;2CAJD;;;;;;;;;;;;;;;;;;;;;;;"}
